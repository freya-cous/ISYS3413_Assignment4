import java.util.HashMap;
import java.util.Date;


public class Person {

    private String personID;
    private String firstName;
    private String lastName;
    private String address;
    private String birthdate;
    private HashMap<Date, Integer> demeritPoints; // A variable that holds the demerit points with the offense day
    private boolean isSuspended;

    public boolean addPerson() {
        //TODO: This method adds information about a person to a TXT file.

        //Condition 1: PersonID should be exactly 10 characters long;
        if (personID.length() != 10) return false;

        //The first two characters should be numbers between 2 and 9, there should be at least two special characters between characters 3 and 8,
        if (!Character.isDigit(personID.charAt(0)) || !Character.isDigit(personID.charAt(1))) return false;
        if (personID.charAt(0) < '2' || personID.charAt(0) > '9') return false;
        if (personID.charAt(1) < '2' || personID.charAt(1) > '9') return false;
        int SpecialCharacterCounter = 0;
        for (int i = 2; i <= 7; i++) {
            char a = personID.charAt(i);
            if (!Character.isLetterOrDigit(a)) SpecialCharacterCounter++;
        }
        if (SpecialCharacterCounter < 2) return false;
        
        //and the last two characters should be upper case letters (A – Z). Example: “56s_d&sfAB”
        if (!Character.isUpperCase(personID.charAt(8)) || (!Character.isUpperCase(personID.charAt(9)))) return false;

        //Condition 2: The address of the Person should follow the following format: Street Number|Street|City|State|Country.
        //The State should be only Victoria. Example: 32|Highland Street|Melbourne|Victoria|Australia.
        String[] CheckAddress = address.split("\\|");
        if (CheckAddress.length != 5 || !CheckAddress[3].equalsIgnoreCase("Victoria")) {
            return false;
        }

        //Condition 3: The format of the birth date of the person should follow the following format: DD-MM-YYYY. Example: 15-11-1990
        try {
            java.text.SimpleDateFormat BirthdateChecker = new java.text.SimpleDateFormat("dd-MM-yyyy");
            BirthdateChecker.setLenient(false);
            BirthdateChecker.parse(birthdate);
        } catch (ParseException e) {
            return false;
        }

        //Instruction: If the Person’s information meets the above conditions and any other conditions you may want to consider,
        //the information should be inserted into a TXT file, and the addPerson function should return true.
        //Otherwise, the information should not be inserted into the TXT file, and the addPerson function should return false.
        return true;
    }

    public boolean updatePersonalDetails() {
        Scanner scanner = new Scanner(System.in);
        System.out.print("Enter current ID of the person to update: ");
        String currentId = scanner.nextLine();

        List<String> lines = new ArrayList<>();
        boolean updated = false;

        try (BufferedReader reader = new BufferedReader(new FileReader("persons.txt"))) {
            String line;

            while ((line = reader.readLine()) != null) {
                Person person = parsePerson(line);

                if (person.getId().equals(currentId)) {
                    System.out.println("Current details: " + person);

                    System.out.print("Enter new ID: ");
                    String newId = scanner.nextLine();
                    System.out.print("Enter new First Name: ");
                    String newFirstName = scanner.nextLine();
                    System.out.print("Enter new Last Name: ");
                    String newLastName = scanner.nextLine();
                    System.out.print("Enter new Address: ");
                    String newAddress = scanner.nextLine();
                    System.out.print("Enter new Birthday (dd-MM-yyyy): ");
                    String newBirthdayStr = scanner.nextLine();

                    DateTimeFormatter formatter = DateTimeFormatter.ofPattern("dd-MM-yyyy");
                    LocalDate newBirthday = LocalDate.parse(newBirthdayStr, formatter);
                    LocalDate oldBirthday = LocalDate.parse(person.getBirthday(), formatter);

                    // validation
                    boolean birthdayChanged = !oldBirthday.equals(newBirthday);
                    boolean idChanged = !person.getId().equals(newId);
                    boolean addressChanged = !person.getAddress().equals(newAddress);

                    int age = Period.between(oldBirthday, LocalDate.now()).getYears();
                    char firstChar = person.getId().charAt(0);

                    if (age < 18 && addressChanged) {
                        System.out.println("Address cannot be changed for person under 18");
                        lines.add(line);
                        continue;
                    }

                    if (birthdayChanged && (idChanged || addressChanged || !person.getFirstName().equals(newFirstName) || !person.getLastName().equals(newLastName))) {
                        System.out.println("If birthday is updated, no other changes can be made");
                        lines.add(line);
                        continue;
                    }

                    if (Character.isDigit(firstChar) && ((firstChar - '0') % 2 == 0) && idChanged) {
                        System.out.println("Cannot change ID number that starts with an even digit");
                        lines.add(line);
                        continue;
                    }

                    person.setId(newId);
                    person.setFirstName(newFirstName);
                    person.setLastName(newLastName);
                    person.setAddress(newAddress);
                    person.setBirthday(newBirthday.format(formatter)); // save as String

                    lines.add(personToString(person));
                    updated = true;
                } 
                else {
                    lines.add(line);
                }
            }

        } 
        
        catch (IOException e) {
            e.printStackTrace();
            return false;
        }

        if (updated) {
            try (BufferedWriter writer = new BufferedWriter(new FileWriter("persons.txt"))) {
                for (String l : lines) {
                    writer.write(l);
                    writer.newLine();
                }
                return true;
            } 
            catch (IOException e) {
                e.printStackTrace();
            }
        }

        return false;
    }

    public String addDemeritPoints() {
        if (!offenseDateStr.matches("\\d{2}-\\d{2}-\\d{4}")) {
            return "Failed";
        }

        if (points < 1 || points > 6) {
            return "Failed";
        } 

        Date offenseDate;
        try {
            java.text.SimpleDateFormat sdf = new java.text.SimpleDateFormat("dd-MM-yyyy");
            sdf.setLenient(false);
            offenseDate = sdf.parse(offenseDateStr);
        } catch (Exception e) {
            return "Failed";
        }

        if (demeritPoints == null) {
            demeritPoints = new HashMap<>();
        }
        demeritPoints.put(offenseDate, points);

        int age;
        try {
            java.text.SimpleDateFormat sdf = new java.text.SimpleDateFormat("dd-MM-yyyy");
            Date birth = sdf.parse(this.birthdate);
            long ageInMillis = offenseDate.getTime() - birth.getTime();
            age = (int) (ageInMillis / (1000L * 60 * 60 * 24 * 365));
        } catch (Exception e) {
            return "Failed";
        }
        int totalPoints = 0;
        long twoYearsMillis = (long) (2 * 365 * 24 * 60 * 60 * 1000);
        
        for (Map.Entry<Date, Integer> entry : demeritPoints.entrySet()) {
            Date d = entry.getKey();
            long diff = Math.abs(offenseDate.getTime() - d.getTime());
            if (diff <= twoYearsMillis) {
                totalPoints += entry.getValue();
            }
        }

        if ((age < 21 && totalPoints > 6) || (age >= 21 && totalPoints > 12)) {
            isSuspended = true;
        }

        return "Success";
        
    }

    public Person(String id, String firstName, String lastName, String address, String birthday, int demeritPointsTotal, boolean isSuspended) {
        this.personID = id;
        this.firstName = firstName;
        this.lastName = lastName;
        this.address = address;
        this.birthdate = birthday;
        this.demeritPoints = new HashMap<>();
        this.demeritPoints.put(new Date(), demeritPointsTotal);
        this.isSuspended = isSuspended;
    }


    private Person parsePerson(String line) {
        String[] parts = line.split(",");
        return new Person(
            parts[0],
            parts[1],
            parts[2],
            parts[3],
            parts[4], 
            Integer.parseInt(parts[5]),
            Boolean.parseBoolean(parts[6])
        );
    }

    private String personToString(Person person) {
        return String.join(",",
            person.getId(),
            person.getFirstName(),
            person.getLastName(),
            person.getAddress(),
            person.getBirthday(),
            String.valueOf(person.getDemeritPoints()),
            String.valueOf(person.isSuspended()));
    }

    public String getId() { 
        return personID; 
    }
    
    public void setId(String id) {
        this.personID = id; 
    }

    public String getFirstName() { 
        return firstName; 
    }
    
    public void setFirstName(String firstName) { 
        this.firstName = firstName; 
    }

    public String getLastName() { 
        return lastName; 
    }
    
    public void setLastName(String lastName) { 
        this.lastName = lastName; 
    }

    public String getAddress() { 
        return address; 
    }
    
    public void setAddress(String address) { 
        this.address = address; 
    }

    public String getBirthday() { 
        return birthdate; 
    }
    
    public void setBirthday(String birthdate) { 
        this.birthdate = birthdate; 
    }

    public boolean isSuspended() { 
        return isSuspended; 
    }
    
    public int getDemeritPoints() {
        return demeritPoints.values().stream().mapToInt(Integer::intValue).sum();
    }
}
