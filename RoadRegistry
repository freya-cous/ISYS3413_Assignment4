import java.util.HashMap;
import java.util.Date;

public class Person {

    private String personID;
    private String firstName;
    private String lastName;
    private String address;
    private String birthdate;
    private HashMap<Date, Integer> demeritPoints; // A variable that holds the demerit points with the offense day
    private boolean isSuspended;

    public boolean addPerson() {
        //TODO: This method adds information about a person to a TXT file.
        //Condition 1: PersonID should be exactly 10 characters long;
        //The first two characters should be numbers between 2 and 9, there should be at least two special characters between characters 3 and 8,
        //and the last two characters should be upper case letters (A – Z). Example: “56s_d&sfAB”
        //Condition 2: The address of the Person should follow the following format: Street Number|Street|City|State|Country.
        //The State should be only Victoria. Example: 32|Highland Street|Melbourne|Victoria|Australia.
        //Condition 3: The format of the birth date of the person should follow the following format: DD-MM-YYYY. Example: 15-11-1990
        //Instruction: If the Person’s information meets the above conditions and any other conditions you may want to consider,
        //the information should be inserted into a TXT file, and the addPerson function should return true.
        //Otherwise, the information should not be inserted into the TXT file, and the addPerson function should return false.
        return true;
    }

    public boolean updatePersonalDetails() {
        //TODO: This method allows updating a given person’s ID, firstName, lastName, address and birthday in a TXT file.
        //Changing personal details will not affect their demerit points or the suspension status.
        //All relevant conditions discussed for the addPerson function also need to be considered and checked in the updatePerson function.
        //Condition 1: If a person is under 18, their address cannot be changed.
        //Condition 2: If a person’s birthday is going to be changed, then no other personal detail (i.e, person’s ID, firstName, lastName, address) can be changed.
        //Condition 3: If the first character/digit of a person’s ID is an even number, then their ID cannot be changed.
        //Instruction: If the Person’s updated information meets the above conditions and any other conditions you may want to consider,
        //the Person’s information should be updated in the TXT file with the updated information, and the updatePersonalDetails function should return true.
        //Otherwise, the Person’s updated information should not be updated in the TXT file, and the updatePersonalDetails function should return false.
        return true;
    }

    public String addDemeritPoints() {
        if (!offenseDateStr.matches("\\d{2}-\\d{2}-\\d{4}")) {
            return "Failed";
        }

        if (points < 1 || points > 6) {
            return "Failed";
        } 

        Date offenseDate;
        try {
            java.text.SimpleDateFormat sdf = new java.text.SimpleDateFormat("dd-MM-yyyy");
            sdf.setLenient(false);
            offenseDate = sdf.parse(offenseDateStr);
        } catch (Exception e) {
            return "Failed";
        }

        if (demeritPoints == null) {
            demeritPoints = new HashMap<>();
        }
        demeritPoints.put(offenseDate, points);

        int age;
        try {
            java.text.SimpleDateFormat sdf = new java.text.SimpleDateFormat("dd-MM-yyyy");
            Date birth = sdf.parse(this.birthdate);
            long ageInMillis = offenseDate.getTime() - birth.getTime();
            age = (int) (ageInMillis / (1000L * 60 * 60 * 24 * 365));
        } catch (Exception e) {
            return "Failed";
        }
        int totalPoints = 0;
        long twoYearsMillis = (long) (2 * 365 * 24 * 60 * 60 * 1000);
        
        for (Map.Entry<Date, Integer> entry : demeritPoints.entrySet()) {
            Date d = entry.getKey();
            long diff = Math.abs(offenseDate.getTime() - d.getTime());
            if (diff <= twoYearsMillis) {
                totalPoints += entry.getValue();
            }
        }

        if ((age < 21 && totalPoints > 6) || (age >= 21 && totalPoints > 12)) {
            isSuspended = true;
        }

        return "Success";
        
    }
}
